#!/bin/bash

if [ -e *.out ]; then
    rm *.out
fi

# 验证一个分离属性的线程退出时，主线程还能不能去接合它？
#    练习2： 验证一个分离属性的线程，在主线程退出时，该分离属性的线程还会不会继续运行？
# day1/2td1.c
# 练习3： 使用该方法来设置分离属性。
# day1/3td1.c
# day1/1td1.c
# 尝试让主线程发送一个取消请求给子线程，看看子线程会不会退出？
# day1/4td1.c
# 如果在线程不能响应取消请求的情况下，收到了一个取消请求，那么这个取消请求就会阻塞到线程能响应为止。
# day1/5td1 copy.c
# day1/5td1.c
# 练习6：
# 	1）收到取消请求，     删除函数的参数0        ---> 收到取消时候，会执行响应取消请求函数，并删除函数。
# 	2）收到取消请求，     删除函数的参数非0      ---> 收到取消时候，会执行响应取消请求函数，并删除函数。
# 	3）没有收到取消请求， 删除函数的参数0        ---> 没有收到，说明不能响应取消函数，而且删除时填0，说明直接删除。
#         4）没有收到取消请求， 删除函数的参数非0      ---> 没有收到，说明不能响应取消函数，但是删除时填非0，说明先运行一次，再删除。
# 	5）不写删除函数
day1/6td1.c

# 有一个进程，里面有4个线程，每个线程的任务都是一样。
	    # 任务： 打印helloworld这个字符串，1s输出1个字符，任务时间：10s
day2/1td2.c
# 在练习1的基础上加一个无名信号量进行线程之间的互斥
day2/2td2.c
# 有一个进程，里面有4个线程，每个线程的任务都是一样。
	    # 任务： 打印helloworld这个字符串，1s输出1个字符，任务时间：10s   要求使用互斥锁来完成。
day2/3td2.c
# 3t的基础上，添加线程例程函数，防止线程在上锁的状态下，被取消
day2/4td2.c

# 临界资源： "int a"   -> 全局变量
# 	    再弄一个线程负责倒数时间即可。
# 	    现在有4个线程，有两个线程想打印a的值    thread1读了3s   thread2读了5s      -> 5s ?  8s ?
# 			  有两个线程想修改a的值    thread3修改了4s  thread4修改了6s    -> 6s ? 10s ?

# 	1）读锁可以同时上，但是写锁不能同时上。
# 	2）读锁与写锁能不能同时上？  -> 不能！
day2/5td2.c

# 练习6： 现在有4个线程，他们的任务都是从银行卡(整型变量)中取200块，一开始银行卡有200块  -> 1个退出，3个在条件变量中睡眠。
# 	   5s后，主线程往(整型变量)增加数据(+400)，然后唤醒所有的线程                    -> 3个退出，1个在条件变量中睡眠。
# 	   3s后，主线程往(整型变量)增加数据(+200)，然后随机唤醒一个                      -> 4个退出，0个在睡眠。
# 	   销毁条件变量即可。 	（每次线程拿钱时，都把拿之前的金额与拿之后的金额打印出来）
day2/job/1job.c

# 线程池
day3/pool_test

# makefile书写
day4/*

# makefile书写 动态库和静态库的使用
day5/*

# linux下文件复制, 实现功能有,文件复制, 文件复制到目标目录下, 源目录及源目录下文件复制到目标目录下
day6/*

# 增加多线程复制能力, linux下文件复制, 实现功能有,文件复制, 文件复制到目标目录下, 源目录及源目录下文件复制到目标目录下
day7/*




if [ $1 == "x86" ]; then
    # x86_64平台的gcc编译
    gcc $c_name.c -o $c_name.out -Wall
elif [ $1 == "arm" ]; then
    arm-linux-gcc $c_name.c -o $c_name.out -Wall
fi

# 用arm-linux-gcc交叉编译生成的是arm平台的linux系统执行文件
if [ -e $c_name.out ] && [ -x $c_name.out ]; then

    if [ $2 ]; then
        ./$c_name.out $2
    else
        ./$c_name.out
    fi

else
    echo "编译没有成功,执行文件没有生成"
fi
