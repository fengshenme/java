一、模板的概念。
1、什么是模板？
泛型编程就是利用模板的技术来进行编程。
模板就是建立通用的模具，大大提供复用性。
例如：PPT模板、照片模板。

2、模板有什么特点？
1）模板不可以直接使用，它只是一个框架。
2）模板的通用并不是万能的。

二、函数模板。
C++提供两种模板机制：函数模板和类模板。

1、函数模板的作用？
建立一个通用的函数，其函数的返回值类型和形参类型可以不具体指定，用一个虚拟的类型来代表。

2、语法。
template<typename T>
函数声明或者定义

解析：
template  --  声明创建模板。
typename  --  表明其后面的符号是一种数据类型，可以使用class代替。
T         --  通用的数据类型，名称可以替换，通常为大写字母。

#include <iostream>
using namespace std;

//交换两个整型函数
void swapInt(int &a,int &b)
{
	int temp = a;
	a = b;
	b = temp;
}

//交换两个浮点型函数
void swapDouble(double &a,double &b)
{
	double temp = a;
	a = b;
	b = temp;
}

//函数模板
template<typename T> //声明一个模板，告诉编译器后面的代码中紧跟着的T不要报错，T是一个通用的数据类型。
void mySwap(T &a, T &b)
{
	T temp = a;
	a = b;
	b = temp;
}

int main()
{
	int a = 10;
	int b = 20;

	//swapInt(a,b);
	//利用函数模板来进行交换。
	//1. 自动类型推导
	//mySwap(a,b);  //自动推导出T是int

	//2. 显示指定类型
	mySwap<int>(a,b);

	cout << "a = " << a << endl;
	cout << "b = " << b << endl;

	double c = 1.1;
	double d = 2.2;

	//swapDouble(c,d);
	//mySwap(c,d);  //自动推导出T是double
	mySwap<double>(c,d);

	cout << "c = " << c << endl;
	cout << "d = " << d << endl;

	//C++还有很多的数据类型，那么就要写很多个，那怎么办?

	return 0;
}

总结：
1）函数模板利用关键字 template
2）使用函数模板有两种方式： 自动类型推导，显示指定类型。
3）模板的目的是为了提高复用性，将类型参数化。

三、函数模板注意事项。
注意事项：
1）自动类型推导，必须推导出一致的数据类型，才可以使用。
2）模板必须要确定出T的数据类型，才可以使用。

#include <iostream>
using namespace std;

//函数模板的注意事项
template<class T>  //typename可以替换成class。
void mySwap(T &a,T &b)
{
	T temp = a;
	a = b;
	b = temp;
}

//1. 类型自动推导，必须推导出一致的数据类型才可以使用。
void test01()
{
	int a = 10;
	int b = 20;
	char c = 'c';

	//mySwap(a,b); 
	//mySwap(a,c); //编译出错: 推导不出一致的类型。

	cout << "a = " << a << endl;
	cout << "b = " << b << endl;

	return;
}

//2. 模板必须要确定T的类型，才可以使用。
template<class T>
void func()
{
	cout << "func的调用" << endl;
}

void test02()
{
	//func();  //couldn't deduce template parameter ‘T’
			   //不可以推导出T的数据类型是什么。

	func<int>();
}

int main()
{
	//test01();
	test02();
}

总结：
使用模板时必须确定出数据类型T，并且能够推导出一致的类型。

四、普通函数与函数模板的区别。
1）普通函数调用时可以发生自动类型转换（隐式类型转换）
2）函数模板调用时，如果利用自动类型推导，不可以发生隐式类型转换。
3）如果利用显示指定类型方式，可以发生隐式类型转换。

#include <iostream>
using namespace std;

/*
普通函数与函数模板的区别:
1）普通函数调用时可以发生自动类型转换（隐式类型转换）
2）函数模板调用时，如果利用自动类型推导，不可以发生隐式类型转换。
3）如果利用显示指定类型方式，可以发生隐式类型转换。
*/

//普通函数
int myAdd01(int a,int b)
{
	return a + b;
}

//函数模板
template<class T>
T myAdd02( T a, T b)
{
	return a + b;
}

int main()
{
	int a = 10;
	int b = 20;
	char c = 'c'; //a-97  c-99

	//1. 普通函数调用时可以发生自动类型转换（隐式类型转换）
	//cout << myAdd01(a,b) << endl; //30
	//cout << myAdd01(a,c) << endl; //109
	//隐式将c变成ascii码来计算,因为它知道10 + c

	//2. 函数模板调用时，如果利用自动类型推导，不可以发生隐式类型转换。
	//cout << myAdd02(a,b) << endl;//30  //自动推导出来这个T是int。
	//cout << myAdd02(a,c) << endl; //错误，因为推导不出来一致的类型。

	//3. 如果利用显示指定类型方式，可以发生隐式类型转换。
	cout << myAdd02<int>(a,c) << endl; //明确告诉你，T就是int，所以c会自动转换成99。

	return 0;
}

总结： 建议使用显示指定类型的方式，调用函数模板，因为可以自己确定通用类型T。

五、普通函数与函数模板的调用规则。
调用规则如下：
1. 如果函数模板和普通函数都可以实现，优先调用普通函数。
2. 可以通过空模板参数列表来强制调用函数模板。
3. 函数模板也可以发生重载。
4. 如果函数模板可以产生更好的匹配，优先调用函数模板。

#include <iostream>
using namespace std;

/*
调用规则如下：
1. 如果函数模板和普通函数都可以实现，优先调用普通函数。
2. 可以通过空模板参数列表来强制调用函数模板。
3. 函数模板也可以发生重载。
4. 如果函数模板可以产生更好的匹配，优先调用函数模板。
*/

//普通函数
void myPrint(int a,int b)
{
	cout << "调用的普通函数" << endl;
}

//函数模板
template<class T>
void myPrint(T a,T b)
{
	cout << "调用的函数模板" << endl; 
}

template<class T>
void myPrint(T a,T b,T c)
{
	cout << "调用重载的函数模板" << endl;
}

int main()
{
	int a = 10;
	int b = 20;

	//1. 如果函数模板和普通函数都可以实现，优先调用普通函数。
	//myPrint(a,b);  //调用普通函数

	//2. 可以通过空模板参数列表来强制调用函数模板。
	//myPrint<>(a,b);  //调用函数模板

	//3. 函数模板也可以发生重载。
	//myPrint<>(a,b);    //调用函数模板
	//myPrint<>(a,b,100);  //调用重载的函数模板

	//4. 如果函数模板可以产生更好的匹配，优先调用函数模板。
	char c1 = 'a';
	char c2 = 'b';
	myPrint(c1,c2);  //调用函数模板

	return 0;
}

总结：既然提供了函数模板，最好就不要提供普通函数，否则容易出现二义性。


六、模板的局限性。
局限性： 模板的通用性并不是万能的。

例如：
template<class T>
void f(T a, T b)
{
	a = b;
}
在上述的代码中提供的赋值操作，如果传入的a和b是一个数组来的，就无法实现了。

再例如：
template<class T>
void f(T a, T b)
{
	if(a > b)
	{

	}
}
在上述代码中，如果T的数据类型传入的是像Person这样的自定义数据类型，也无法正常运行。
因此C++为了解决这个问题，提供模板的重载，可以为这些特定的类型提供具体化的模板。

#include <iostream>
using namespace std;

//模板的局限性
//模板并不是万能的，有些特定的数据类型
//需要使用具体化的方式做特殊的实现。

//设计人类
class Person{
public:
	Person(string name,int age)
	{
		this->m_Name = name;
		this->m_Age = age;
	}

	string m_Name; //姓名
	int m_Age;     //年龄
};

//对比两个数据是否相同
template<class T>
bool myCompare( T &a, T &b )
{
	if(a == b)
	{
		return true;
	}
	else{
		return false;
	}
}

//需要使用具体化的方式做特殊的实现。
template<> bool myCompare(Person &p1,Person &p2)
{
	if(p1.m_Name == p2.m_Name && p1.m_Age == p2.m_Age)
	{
		return true;
	}
	else{
		return false;
	}
}

void test01()
{
	int a = 10;
	int b = 10;

	bool ret = myCompare(a,b);
	if(ret)
	{
		cout << "a == b" << endl;
	}
	else{
		cout << "a != b" << endl;
	}
}

void test02()
{
	Person p1("Tom",10);
	Person p2("Tom",10);

	bool ret = myCompare(p1,p2);
	if(ret)
	{
		cout << "p1和p2是相同的!" << endl;
	}
	else{
		cout << "p1和p2是不相同的!" << endl;
	}
}


int main()
{
	//test01();
	test02();

	return 0;
}

总结：
利用具体化的模板，可以解决自定义数据类型的通用化。
学习模板并不是为了写模板，而是在STL中能够运行系统提供的模板。


七、类模板。
1、类模板的作用？
建立一个通用类，类中的成员数据类型可以不具体指定，用一个虚拟的类型来代表。

2、类模板的语法。
template<typename T>
类

解析：
template   ---  声明创建一个模板
typename   ---  表明其后面的符号是一种数据类型，可以使用class来代替。
T          ---  通用的数据类型，名称可以替换，通常为大写字母。
#include <iostream>
using namespace std;

//类模板
template<class NameType,class AgeType>
class Person{
public:
	Person(NameType name,AgeType age)
	{
		this->m_Name = name;
		this->m_Age = age;
	}

	void showPerson()
	{
		cout << "name = " << this->m_Name << endl;
		cout << "age = " << this->m_Age << endl;
	}

	NameType m_Name;
	AgeType m_Age;
};

int main()
{
	Person<string,int> p1("张三",100);
	p1.showPerson();

	return 0;
}

总结： 
类模板与函数模板的语法非常相似，在声明模板template后面加类，此类称为类模板。


八、类模板与函数模板的区别？
类模板与函数模板区别主要有两点：
1.类模板没有自动类型推导的使用方式。
2.类模板在模板参数列表中可以有默认参数。

#include <iostream>
using namespace std;

//类模板与函数模板的区别
template<class NameType,class AgeType = int>
class Person{
public:
	Person(NameType name,AgeType age)
	{
		this->m_Name = name;
		this->m_Age = age;
	}

	void showPerson()
	{
		cout << "name = " << this->m_Name << endl;
		cout << "age = " << this->m_Age << endl;
 	}


	NameType m_Name;
	AgeType m_Age;
};

//1. 类模板没有自动类型推导的方式
/*
void test01()
{
	//Person p("张三",100); //报错:   error: missing template arguments before ‘p’
						    //在p的前面缺少类模板参数，也就是说编译器不会帮你推导。

	Person<string,int> p("李四",20);
	p.showPerson();
}
*/

//2. 类模板在模板参数列表中可以有默认参数。
void test02()
{
	Person<string> p("王五",30);
	p.showPerson();

}


int main()
{
	//test01();
	test02();

	return 0;
}

总结：
1）类模板使用只能显示指定类型方式
2）类模板中模板参数列表中可以有默认参数。

九、类模板中成员函数创建时机。
类模板中成员函数和普通类中成员函数创建时机是有区别的
1）普通类中成员函数一开始就创建。
2）类模板中的成员函数在调用时才会创建。

#include <iostream>
using namespace std;

//类模板中成员函数创建时机
//类模板中的成员函数在调用时才创建。

class Person1{
public:
	void showPerson1()
	{
		cout << "Person1 show" << endl;
	}
};

class Person2{
public:
	void showPerson2()
	{
		cout << "Person2 show" << endl;
	}
};

template<class T>
class MyClass
{
public:
	void func1()
	{
		obj.showPerson1();
	}

	void func2()
	{
		obj.showPerson2();
	}

	T obj; //目前为止，你还不知道T是什么类型。
};

int main()
{
	MyClass<Person1> m;  //确定T的类型是Person1   
						 //如果只有这句话，那么也会编译通过，因为还没有调用类模板的成员函数
	//m.func1();  //这里调用了类模板的成员函数，所以成员函数就会创建
	//m.func2();

	return 0;
}

十、类模板对象做函数参数。
学习目标：
类模板实例化出来的对象，向函数传参的方式。

一共有三种方式：
1. 指定传入的类型   ---  直接显示对象的数据类型
2. 参数模板化       ---  将对象中的参数变为模板进行传递
3. 整个类模板化     ---  将这个对象类型模板化进行传递

#include <iostream>
#include <typeinfo>
using namespace std;

//类模板对象做函数参数
template<class T1,class T2>
class Person{
public:
	Person(T1 name, T2 age)
	{
		this->m_Name = name;
		this->m_Age = age;
	}

	void showPerson()
	{
		cout << "姓名:" << this->m_Name << " 年龄:" << this->m_Age << endl; 
	}

	T1 m_Name;
	T2 m_Age;
};

//1. 指定传入的类型(常用)
void printPerson1(Person<string,int> &p)
{
	p.showPerson();
}

void test01()
{
	Person<string,int> p("孙悟空",100);
	printPerson1(p);
}

//2. 参数模板化
template<class T1,class T2>
void printPerson2(Person<T1,T2> &p)
{
	p.showPerson();
	cout << "T1的类型为:" << typeid(T1).name() << endl;  //string
	cout << "T2的类型为:" << typeid(T2).name() << endl;  //i  -> int
}

void test02()
{
	Person<string,int> p("猪八戒",50);
	printPerson2(p);
}

//3. 整个类模板化
template<class T> 
void printPerson3( T &p)
{
	p.showPerson();
	cout << "T的类型为:" << typeid(T).name() << endl;  //Person
}

void test03()
{
	Person<string,int> p("唐僧",90);
	printPerson3(p);
}

int main()
{
	//test01();
	//test02();
	test03();
	return 0;
}

总结：
1）通过类模板创建的对象，可以有三种方式向函数中进行传参。
2）使用比较广泛是第一种，指定传入类型。














































